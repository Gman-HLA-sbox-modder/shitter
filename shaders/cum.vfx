HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Post Processing Shader";
}

FEATURES
{
    #include "common/features.hlsl"
}

MODES
{
    VrForward();
    Default();
}

COMMON
{
	#include "system.fxc"
    #include "common.fxc"
    #include "common/proceedural.hlsl"
}

struct VertexInput
{
    float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
    float2 vTexCoord : TEXCOORD0 < Semantic( LowPrecisionUv ); >;    
};

struct PixelInput
{
    float4 vPositionPs : SV_Position;
    float2 vTexCoord : TEXCOORD0;
};

VS
{
    PixelInput MainVs( VertexInput i )
    {
        PixelInput o;
        o.vPositionPs = float4(i.vPositionOs.xyz, 1.0f);
        o.vTexCoord = i.vTexCoord;
        return o;
    }
}

PS
{
    struct PixelOutput
    {
        float4 vColor : SV_Target0;
    };

    // grab the frame buffer texture
    CreateTexture2D( g_FrameBuffer )< Attribute("FrameBufferCopyTexture"); SrgbRead( false ); >;

    PixelOutput MainPs( PixelInput i )
    {
        PixelOutput o;
        float2 uv = i.vTexCoord.xy; // uv from 0,0 in the top left to 1,1 in the bottom right

        float4 color = Tex2D(g_FrameBuffer, uv.xy).rgba; // grab color from frame texture

        o.vColor = color * float4(uv.xy,0,1);
        return o;
    }
}